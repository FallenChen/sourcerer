buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.4"
    }
}

plugins {
    id "org.sonarqube" version "2.2"
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sonarqube {
    properties {
        property "sonar.projectVersion", getVersionName()
        property "sonar.jacoco.reportPath", "build/coverage/jacoco.exec"
        property "sonar.analysis.mode", "preview"
        property "sonar.host.url", property("sourcerer_sonar_host_url")
        property "sonar.login", property("sourcerer_sonar_login")
        property "sonar.github.oauth", property("sourcerer_sonar_github_oauth")
    }
}

subprojects {
    group = 'org.elder.sourcerer'
    version = getVersionName()

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    apply plugin: "jacoco"

    checkstyle {
        configFile = new File(rootDir, "infra/codehealth/checkstyle.xml")
        toolVersion = "7.1.1"
        ignoreFailures = false
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jacoco {
        reportsDir = file("build/coverage/jacoco.exec")
    }

    repositories {
        mavenCentral()
        maven {
            credentials {
                username property("sourcerer_nexus_username")
                password property("sourcerer_nexus_password")
            }
            url property("sourcerer_nexus_releaseUrl")
        }
    }

    dependencies {
        compile 'ch.qos.logback:logback-classic:1.1.7'
        compile 'org.slf4j:jcl-over-slf4j:1.7.21'
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.powermock:powermock-mockito-release-full:1.6.4'
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    task downloadDependencies(type: Copy) {
        from configurations.testRuntime
        into 'build/tmp/dependencieshack/'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username property("sourcerer_nexus_username")
                    password property("sourcerer_nexus_password")
                }
                url property("sourcerer_nexus_releaseUrl")
            }
        }
    }
}

task pushAll(dependsOn: [subprojects.publish])
